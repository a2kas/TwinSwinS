@page "/account"
@using Microsoft.EntityFrameworkCore
@using TwinsWins.Data.Model
@using TwinsWins.Data
@using TwinsWins.Services
@using TwinsWins.Components.Dialog
@using TwinsWins.Components.SnackBar

@inject DatabaseContext DbContext
@inject ITonWalletService WalletService
@inject IGameService GameService

<div>
    <ul class="nav nav-tabs" id="myTab" role="tablist">
        <li class="nav-item" role="presentation">
            <button class="nav-link active" id="account-tab" data-bs-toggle="tab" data-bs-target="#account" type="button" role="tab" aria-controls="account" aria-selected="true">Account</button>
        </li>
        <li class="nav-item" role="presentation">
            <button class="nav-link" id="history-tab" data-bs-toggle="tab" data-bs-target="#history" type="button" role="tab" aria-controls="history" aria-selected="false">History</button>
        </li>
        <li class="nav-item" role="presentation">
            <button class="nav-link" id="blockchain-tab" data-bs-toggle="tab" data-bs-target="#blockchain" type="button" role="tab" aria-controls="blockchain" aria-selected="false">Blockchain</button>
        </li>
        <li class="nav-item" role="presentation">
            <button class="nav-link" id="affiliate-tab" data-bs-toggle="tab" data-bs-target="#affiliate" type="button" role="tab" aria-controls="affiliate" aria-selected="false">Affiliate</button>
        </li>
        <li class="nav-item" role="presentation">
            <button class="nav-link" id="bonus-tab" data-bs-toggle="tab" data-bs-target="#bonus" type="button" role="tab" aria-controls="bonus" aria-selected="false">Bonus Codes</button>
        </li>
    </ul>
    <div class="tab-content" id="myTabContent">
        <div class="tab-pane fade show active" id="account" role="tabpanel" aria-labelledby="account-tab">
            <h6 class="mt-3">Account Information</h6>
            <div class="card mb-3">
                <div class="card-body">
                    <p><strong>Wallet Address:</strong> @(WalletService.WalletAddress)</p>
                    <p><strong>Status:</strong> @(WalletService.IsConnected ? "Connected" : "Disconnected")</p>
                    <button class="btn btn-primary" @onclick="ShowRedeemBonusDialog">Redeem Bonus Code</button>
                </div>
            </div>
        </div>
        <div class="tab-pane fade" id="history" role="tabpanel" aria-labelledby="history-tab">
            <h6 class="mt-3">Game History</h6>
            <div class="table-responsive">
                <table class="table">
                    <thead>
                        <tr>
                            <th>ID</th>
                            <th>Address</th>
                            <th>Created</th>
                        </tr>
                    </thead>
                    <tbody>
                        @foreach (var user in pagedUsers)
                        {
                            <tr>
                                <td>@user.Id</td>
                                <td>@user.Address</td>
                                <td>@user.Created</td>
                            </tr>
                        }
                    </tbody>
                </table>
            </div>
            <nav>
                <ul class="pagination">
                    <li class="page-item @(currentPage == 1 ? "disabled" : "")">
                        <button class="page-link" @onclick="PreviousPage">Previous</button>
                    </li>
                    @for (int i = 1; i <= totalPages; i++)
                    {
                        var pageNumber = i; // Explicitly capture the value of 'i'
                        <li class="page-item @(currentPage == pageNumber ? "active" : "")">
                            <button class="page-link" @onclick="() => GoToPage(pageNumber)">@pageNumber</button>
                        </li>
                    }
                    <li class="page-item @(currentPage == totalPages ? "disabled" : "")">
                        <button class="page-link" @onclick="NextPage">Next</button>
                    </li>
                </ul>
            </nav>
        </div>
        <div class="tab-pane fade" id="blockchain" role="tabpanel" aria-labelledby="blockchain-tab">
            <h6 class="mt-3">Blockchain Game Status</h6>
            <button class="btn btn-sm btn-primary mb-3" @onclick="RefreshBlockchainStatus">
                <span class="oi oi-reload"></span> Refresh Status
            </button>

            @if (isLoading)
            {
                <div class="spinner-border text-primary" role="status">
                    <span class="visually-hidden">Loading...</span>
                </div>
                <span class="ms-2">Checking blockchain status...</span>
            }
            else if (blockchainStatus != null)
            {
                <div class="card">
                    <div class="card-header bg-primary text-white">
                        TON Game Status
                    </div>
                    <div class="card-body">
                        @if (blockchainStatus.IsGameInitialized)
                        {
                            <p><strong>Active Game:</strong> Yes</p>
                            <p><strong>Prize Pool:</strong> @blockchainStatus.PrizePool TON</p>
                            <p><strong>First Player:</strong> @(string.IsNullOrEmpty(blockchainStatus.Player1Address) ? "Waiting..." : TruncateAddress(blockchainStatus.Player1Address))</p>
                            @if (!string.IsNullOrEmpty(blockchainStatus.Player2Address) && blockchainStatus.Player2Address != "0:0000000000000000000000000000000000000000000000000000000000000000")
                            {
                                <p><strong>Second Player:</strong> @TruncateAddress(blockchainStatus.Player2Address)</p>
                                <p><strong>Scores:</strong> @blockchainStatus.Player1Score vs @blockchainStatus.Player2Score</p>
                                <p><strong>Winner:</strong> @(blockchainStatus.GetWinnerAddress())</p>

                                <div class="alert alert-info mt-3">
                                    @if (blockchainStatus.Player1Score == blockchainStatus.Player2Score)
                                    {
                                        <p>The game ended in a tie! The prize pool was split evenly between players.</p>
                                    }
                                    else if (blockchainStatus.Player1Score > blockchainStatus.Player2Score)
                                    {
                                        <p>Player 1 won the game and received the prize.</p>
                                    }
                                    else
                                    {
                                        <p>Player 2 won the game and received the prize.</p>
                                    }
                                </div>
                            }
                            else
                            {
                                <p>Waiting for second player...</p>
                                
                                @if (blockchainStatus.HasTimedOut)
                                {
                                    <div class="alert alert-warning">
                                        <p>Game has timed out (over 24 hours). Prize will be returned to player 1.</p>
                                    </div>
                                }
                            }
                        }
                        else
                        {
                            <p>No active game on the blockchain.</p>
                        }
                        
                        @if (!string.IsNullOrEmpty(blockchainStatus.Error))
                        {
                            <div class="alert alert-warning">@blockchainStatus.Error</div>
                        }
                    </div>
                </div>
            }
        </div>
        <div class="tab-pane fade" id="affiliate" role="tabpanel" aria-labelledby="affiliate-tab">
            <h6 class="mt-3">Affiliate Program</h6>
            <div class="card">
                <div class="card-body">
                    <p>Share your affiliate link to earn 3% of the prize pool when your referrals play games!</p>
                    <div class="input-group mb-3">
                        <input type="text" class="form-control" value="@GetAffiliateLink()" readonly>
                        <button class="btn btn-outline-secondary" type="button" @onclick="CopyAffiliateLink">Copy</button>
                    </div>
                </div>
            </div>
        </div>
        <div class="tab-pane fade" id="bonus" role="tabpanel" aria-labelledby="bonus-tab">
            <h6 class="mt-3">Bonus Codes</h6>
            <div class="mt-3">
                @if (isDeveloper)
                {
                    <div class="mb-3">
                        <button class="btn btn-success me-2" @onclick="ShowAddBonusDialog">Add Bonus Code</button>
                        <button class="btn btn-danger" @onclick="ShowRemoveBonusDialog">Remove Bonus Code</button>
                    </div>
                }
                <div class="mt-3">
                    <p>You can redeem bonus codes to receive TON rewards!</p>
                    <button class="btn btn-primary" @onclick="ShowRedeemBonusDialog">Redeem Bonus Code</button>
                </div>
            </div>
        </div>
    </div>
</div>

<BonusCodeDialog @ref="bonusCodeDialog" OnCodeRedeemed="HandleCodeRedeemed" />
<SnackBar @ref="snackbar" />

@code {
    private List<User> Users = new();
    private List<User> pagedUsers = new();
    private int currentPage = 1;
    private int pageSize = 3;
    private int totalPages;
    private bool isDeveloper = false;
    private BonusCodeDialog bonusCodeDialog;
    private SnackBar snackbar;
    private bool isLoading = false;
    private GameStatus blockchainStatus;

    // Developer wallet address - this should be stored securely in a configuration
    private const string DEVELOPER_ADDRESS = "EQB4SrBdve8cDp7x_0pGthk-llNVyCZMdHBiJeWQEii1LFkK";

    protected override async Task OnInitializedAsync()
    {
        Users = await DbContext.Users.ToListAsync();
        totalPages = (int)Math.Ceiling(Users.Count / (double)pageSize);
        LoadPage();

        // Check if current user is the developer
        isDeveloper = WalletService.IsConnected && 
                     WalletService.WalletAddress.Equals(DEVELOPER_ADDRESS, StringComparison.OrdinalIgnoreCase);
                     
        await RefreshBlockchainStatus();
    }
    
    private async Task RefreshBlockchainStatus()
    {
        try
        {
            isLoading = true;
            StateHasChanged();
            
            blockchainStatus = await GameService.GetGameStatus();
            
            isLoading = false;
            StateHasChanged();
        }
        catch (Exception ex)
        {
            isLoading = false;
            snackbar.Show($"Error checking blockchain status: {ex.Message}");
            StateHasChanged();
        }
    }
    
    private string TruncateAddress(string address)
    {
        if (string.IsNullOrEmpty(address) || address.Length < 10)
            return address;
            
        return $"{address.Substring(0, 6)}...{address.Substring(address.Length - 6)}";
    }

    private void LoadPage()
    {
        pagedUsers = Users.Skip((currentPage - 1) * pageSize).Take(pageSize).ToList();
    }

    private void PreviousPage()
    {
        if (currentPage > 1)
        {
            currentPage--;
            LoadPage();
        }
    }

    private void NextPage()
    {
        if (currentPage < totalPages)
        {
            currentPage++;
            LoadPage();
        }
    }

    private void GoToPage(int pageNumber)
    {
        currentPage = pageNumber;
        LoadPage();
    }
    
    private string GetAffiliateLink()
    {
        if (!WalletService.IsConnected)
            return "Please connect your wallet";
            
        return $"https://twinswins.com/ref/{WalletService.WalletAddress}";
    }
    
    private void CopyAffiliateLink()
    {
        // In real implementation, this would copy to clipboard
        snackbar.Show("Affiliate link copied to clipboard!");
    }

    private void ShowRedeemBonusDialog()
    {
        if (!WalletService.IsConnected)
        {
            snackbar.Show("Please connect your wallet first");
            return;
        }
        bonusCodeDialog.Show();
    }

    private void ShowAddBonusDialog()
    {
        if (!isDeveloper)
        {
            snackbar.Show("Only the developer can add bonus codes");
            return;
        }
     //   adminBonusCodeDialog.Show(false);
    }

    private void ShowRemoveBonusDialog()
    {
        if (!isDeveloper)
        {
            snackbar.Show("Only the developer can remove bonus codes");
            return;
        }
       // adminBonusCodeDialog.Show(true);
    }

    private void HandleCodeRedeemed()
    {
        // You could refresh user balance or other data here
        snackbar.Show("Bonus code redeemed successfully!");
    }

    private void HandleCodeAdded()
    {
        snackbar.Show("Bonus code added successfully");
    }

    private void HandleCodeRemoved()
    {
        snackbar.Show("Bonus code removed successfully");
    }
}