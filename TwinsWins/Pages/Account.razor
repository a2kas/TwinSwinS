@page "/account"
@using Microsoft.EntityFrameworkCore
@using TwinsWins.Data.Model
@using TwinsWins.Data
@using TwinsWins.Services
@using TwinsWins.Components.Dialog
@using TwinsWins.Components.SnackBar

@inject DatabaseContext DbContext
@inject ITonWalletService WalletService
@inject IGameService GameService

<div>
    <ul class="nav nav-tabs" id="myTab" role="tablist">
        <li class="nav-item" role="presentation">
            <button class="nav-link @(activeTab == "profile" ? "active" : "")" id="profile-tab" @onclick="@(() => activeTab = "profile")" type="button" role="tab" aria-controls="profile" aria-selected="@(activeTab == "profile")">Profile</button>
        </li>
        <li class="nav-item" role="presentation">
            <button class="nav-link @(activeTab == "transactions" ? "active" : "")" id="transactions-tab" @onclick="@(() => activeTab = "transactions")" type="button" role="tab" aria-controls="transactions" aria-selected="@(activeTab == "transactions")">Transactions</button>
        </li>
    </ul>

    <div class="tab-content" id="myTabContent">
        <!-- Profile Tab -->
        <div class="tab-pane fade @(activeTab == "profile" ? "show active" : "")" id="profile" role="tabpanel" aria-labelledby="profile-tab">
            <h6 class="mt-3 ms-3">Account Information</h6>
            <div class="card mb-3">
                <div class="card-body">
                    <p><strong>Wallet Address:</strong> @(WalletService.WalletAddress)</p>
                    <p><strong>Status:</strong> @(WalletService.IsConnected ? "Connected" : "Disconnected")</p>
                    <button class="btn btn-primary" @onclick="ShowRedeemBonusDialog">Redeem Bonus Code</button>
                </div>
            </div>

            <h6 class="mt-4 ms-3">Affiliate Program</h6>
            <div class="card">
                <div class="card-body">
                    <p>Share your affiliate link to earn 3% of the prize pool when your referrals play games!</p>
                    <div class="input-group mb-3">
                        <input type="text" class="form-control" value="@GetAffiliateLink()" readonly>
                        <button class="btn btn-outline-secondary" type="button" @onclick="CopyAffiliateLink">Copy</button>
                    </div>
                </div>
            </div>
        </div>

        <!-- Transactions Tab -->
        <div class="tab-pane fade @(activeTab == "transactions" ? "show active" : "")" id="transactions" role="tabpanel" aria-labelledby="transactions-tab">
            <h6 class="mt-3">Blockchain Transactions</h6>

            <button class="btn btn-sm btn-primary mb-3" @onclick="RefreshBlockchainStatus">
                <span class="oi oi-reload"></span> Refresh Status
            </button>

            @if (isLoading)
            {
                <div class="spinner-border text-primary" role="status">
                    <span class="visually-hidden">Loading...</span>
                </div>
                <span class="ms-2">Loading transaction data...</span>
            }
            else
            {
                <ul class="nav nav-pills mb-3" id="transactions-subtabs" role="tablist">
                    <li class="nav-item" role="presentation">
                        <button class="nav-link @(activeTransactionTab == "games" ? "active" : "")"
                                @onclick="@(() => activeTransactionTab = "games")" type="button">
                            Games
                        </button>
                    </li>
                    <li class="nav-item" role="presentation">
                        <button class="nav-link @(activeTransactionTab == "bonuses" ? "active" : "")"
                                @onclick="@(() => activeTransactionTab = "bonuses")" type="button">
                            Bonuses
                        </button>
                    </li>
                    <li class="nav-item" role="presentation">
                        <button class="nav-link @(activeTransactionTab == "affiliate" ? "active" : "")"
                                @onclick="@(() => activeTransactionTab = "affiliate")" type="button">
                            Affiliate
                        </button>
                    </li>
                </ul>

                <div class="tab-content">
                    <!-- Games Transactions -->
                    <div class="@(activeTransactionTab == "games" ? "active" : "d-none")">
                        @if (blockchainStatus != null)
                        {
                            <div class="card">
                                <div class="card-header bg-primary text-white">
                                    TON Game Status
                                </div>
                                <div class="card-body">
                                    @if (blockchainStatus.IsGameInitialized)
                                    {
                                        <p><strong>Active Game:</strong> Yes</p>
                                        <p><strong>Prize Pool:</strong> @blockchainStatus.PrizePool TON</p>
                                        <p><strong>First Player:</strong> @(string.IsNullOrEmpty(blockchainStatus.Player1Address) ? "Waiting..." : TruncateAddress(blockchainStatus.Player1Address))</p>
                                        @if (!string.IsNullOrEmpty(blockchainStatus.Player2Address) && blockchainStatus.Player2Address != "0:0000000000000000000000000000000000000000000000000000000000000000")
                                        {
                                            <p><strong>Second Player:</strong> @TruncateAddress(blockchainStatus.Player2Address)</p>
                                            <p><strong>Scores:</strong> @blockchainStatus.Player1Score vs @blockchainStatus.Player2Score</p>
                                            <p><strong>Winner:</strong> @(blockchainStatus.GetWinnerAddress())</p>

                                            <div class="alert alert-info mt-3">
                                                @if (blockchainStatus.Player1Score == blockchainStatus.Player2Score)
                                                {
                                                    <p>The game ended in a tie! The prize pool was split evenly between players.</p>
                                                }
                                                else if (blockchainStatus.Player1Score > blockchainStatus.Player2Score)
                                                {
                                                    <p>Player 1 won the game and received the prize.</p>
                                                }
                                                else
                                                {
                                                    <p>Player 2 won the game and received the prize.</p>
                                                }
                                            </div>
                                        }
                                        else
                                        {
                                            <p>Waiting for second player...</p>

                                            @if (blockchainStatus.HasTimedOut)
                                            {
                                                <div class="alert alert-warning">
                                                    <p>Game has timed out (over 24 hours). Prize will be returned to player 1.</p>
                                                </div>
                                            }
                                        }
                                    }
                                    else
                                    {
                                        <p>No active game on the blockchain.</p>
                                    }

                                    @if (!string.IsNullOrEmpty(blockchainStatus.Error))
                                    {
                                        <div class="alert alert-warning">@blockchainStatus.Error</div>
                                    }
                                </div>
                            </div>
                        }
                    </div>

                    <!-- Bonus Transactions -->
                    <div class="@(activeTransactionTab == "bonuses" ? "active" : "d-none")">
                        <div class="card">
                            <div class="card-body">
                                <h6 class="ms-2">Bonus Code Redemptions</h6>
                                @if (bonusTransactions.Any())
                                {
                                    <table class="table">
                                        <thead>
                                            <tr>
                                                <th>Date</th>
                                                <th>Code</th>
                                                <th>Amount</th>
                                                <th>Status</th>
                                            </tr>
                                        </thead>
                                        <tbody>
                                            @foreach (var transaction in bonusTransactions)
                                            {
                                                <tr>
                                                    <td>@transaction.Date</td>
                                                    <td>@transaction.Code</td>
                                                    <td>@transaction.Amount TON</td>
                                                    <td>@transaction.Status</td>
                                                </tr>
                                            }
                                        </tbody>
                                    </table>
                                }
                                else
                                {
                                    <p>No bonus redemptions found.</p>
                                }
                                <div class="mt-3">
                                    <button class="btn btn-primary" @onclick="ShowRedeemBonusDialog">Redeem Bonus Code</button>
                                </div>
                            </div>
                        </div>
                    </div>

                    <!-- Affiliate Transactions -->
                    <div class="@(activeTransactionTab == "affiliate" ? "active" : "d-none")">
                        <div class="card">
                            <div class="card-body">
                                <h6 class="ms-2">Affiliate Earnings</h6>
                                @if (affiliateTransactions.Any())
                                {
                                    <table class="table">
                                        <thead>
                                            <tr>
                                                <th>Date</th>
                                                <th>Referred User</th>
                                                <th>Game Amount</th>
                                                <th>Your Commission</th>
                                            </tr>
                                        </thead>
                                        <tbody>
                                            @foreach (var transaction in affiliateTransactions)
                                            {
                                                <tr>
                                                    <td>@transaction.Date</td>
                                                    <td>@TruncateAddress(transaction.ReferredUser)</td>
                                                    <td>@transaction.GameAmount TON</td>
                                                    <td>@transaction.Commission TON</td>
                                                </tr>
                                            }
                                        </tbody>
                                    </table>
                                }
                                else
                                {
                                    <p>No affiliate earnings found.</p>
                                }
                                <div class="input-group mb-3 mt-3">
                                    <input type="text" class="form-control" value="@GetAffiliateLink()" readonly>
                                    <button class="btn btn-outline-secondary" type="button" @onclick="CopyAffiliateLink">Copy</button>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            }
        </div>
    </div>
</div>

<BonusCodeDialog @ref="bonusCodeDialog" OnCodeRedeemed="HandleCodeRedeemed" />
<SnackBar @ref="snackbar" />

@code {
    private List<User> Users = new();
    private List<User> pagedUsers = new();
    private int currentPage = 1;
    private int pageSize = 3;
    private int totalPages;
    private bool isLoading = false;
    private GameStatus blockchainStatus;
    private BonusCodeDialog bonusCodeDialog;
    private SnackBar snackbar;
    private string activeTab = "profile";
    private string activeTransactionTab = "games";

    // Mock data for transactions - would be fetched from blockchain in a real app
    private List<BonusTransaction> bonusTransactions = new();
    private List<AffiliateTransaction> affiliateTransactions = new();

    protected override async Task OnInitializedAsync()
    {
        Users = await DbContext.Users.ToListAsync();
        totalPages = (int)Math.Ceiling(Users.Count / (double)pageSize);
        LoadPage();

        await RefreshBlockchainStatus();

        // Load mock transaction data - in a real app, these would come from the blockchain
        LoadMockTransactionData();
    }

    private void LoadMockTransactionData()
    {
        // This is just for demo purposes - real data would come from the blockchain
        bonusTransactions = new List<BonusTransaction>
        {
            new BonusTransaction { Date = DateTime.Now.AddDays(-5), Code = "WELCOME2024", Amount = 0.5m, Status = "Redeemed" },
            new BonusTransaction { Date = DateTime.Now.AddDays(-15), Code = "NEWUSER", Amount = 0.2m, Status = "Redeemed" }
        };

        affiliateTransactions = new List<AffiliateTransaction>
        {
            new AffiliateTransaction {
                Date = DateTime.Now.AddDays(-3),
                ReferredUser = "0:7A8D9E5F4C3B2A1098765432100FEDCBA98765432",
                GameAmount = 2.0m,
                Commission = 0.06m
            },
            new AffiliateTransaction {
                Date = DateTime.Now.AddDays(-7),
                ReferredUser = "0:1234567890ABCDEF1234567890ABCDEF1234567890",
                GameAmount = 1.0m,
                Commission = 0.03m
            }
        };
    }

    // No need for SetActiveTab and SetActiveTransactionTab methods as we're directly setting the properties

    private async Task RefreshBlockchainStatus()
    {
        try
        {
            isLoading = true;
            StateHasChanged();

            blockchainStatus = await GameService.GetGameStatus();

            isLoading = false;
            StateHasChanged();
        }
        catch (Exception ex)
        {
            isLoading = false;
            snackbar.Show($"Error checking blockchain status: {ex.Message}");
            StateHasChanged();
        }
    }

    private string TruncateAddress(string address)
    {
        if (string.IsNullOrEmpty(address) || address.Length < 10)
            return address;

        return $"{address.Substring(0, 6)}...{address.Substring(address.Length - 6)}";
    }

    private void LoadPage()
    {
        pagedUsers = Users.Skip((currentPage - 1) * pageSize).Take(pageSize).ToList();
    }

    private void PreviousPage()
    {
        if (currentPage > 1)
        {
            currentPage--;
            LoadPage();
        }
    }

    private void NextPage()
    {
        if (currentPage < totalPages)
        {
            currentPage++;
            LoadPage();
        }
    }

    private void GoToPage(int pageNumber)
    {
        currentPage = pageNumber;
        LoadPage();
    }

    private string GetAffiliateLink()
    {
        if (!WalletService.IsConnected)
            return "Please connect your wallet";

        return $"https://twinswins.com/ref/{WalletService.WalletAddress}";
    }

    private void CopyAffiliateLink()
    {
        // In real implementation, this would copy to clipboard
        snackbar.Show("Affiliate link copied to clipboard!");
    }

    private void ShowRedeemBonusDialog()
    {
        if (!WalletService.IsConnected)
        {
            snackbar.Show("Please connect your wallet first");
            return;
        }
        bonusCodeDialog.Show();
    }

    private void HandleCodeRedeemed()
    {
        // Add the newly redeemed code to the list (in a real app would fetch from blockchain)
        bonusTransactions.Insert(0, new BonusTransaction
            {
                Date = DateTime.Now,
                Code = "NEW_CODE",
                Amount = 0.3m,
                Status = "Redeemed"
            });

        snackbar.Show("Bonus code redeemed successfully!");
    }

    // Classes for transaction models
    public class BonusTransaction
    {
        public DateTime Date { get; set; }
        public string Code { get; set; }
        public decimal Amount { get; set; }
        public string Status { get; set; }
    }

    public class AffiliateTransaction
    {
        public DateTime Date { get; set; }
        public string ReferredUser { get; set; }
        public decimal GameAmount { get; set; }
        public decimal Commission { get; set; }
    }
}