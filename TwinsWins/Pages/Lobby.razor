@page "/lobby"
@using Microsoft.AspNetCore.SignalR.Client
@using TwinsWins.Data.Model
@using TwinsWins.Data.Repository
@using TwinsWins.Services
@using TwinsWins.Components.Dialog
@using TwinsWins.Components.SnackBar;
@inject IGameService GameService
@inject ITonWalletService WalletService
@inject NavigationManager Navigation

<div class="d-flex justify-content-between align-items-center mb-4">
    <h3>Game Lobby</h3>
    <button class="btn btn-primary" @onclick="ShowCreateGameDialog">Create New Game</button>
</div>

<CreateGameDialog @ref="createGameDialog" OnGameCreated="HandleGameCreated" />
<WalletConnectDialog @ref="walletConnectDialog" />

<table class="table">
    <thead>
        <tr>
            <th>Owner ID</th>
            <th>Created</th>
            <th>Stake</th>
            <th>Action</th>
        </tr>
    </thead>
    <tbody>
        @foreach (var game in availableGames)
        {
            <tr>
                <td>@game.OwnerId</td>
                <td>@game.Created</td>
                <td>@game.Stake TON</td>
                <td>
                    <button class="btn btn-primary" @onclick="() => JoinGame(game.Id)">Play</button>
                </td>
            </tr>
        }
    </tbody>
</table>

@if (!availableGames.Any())
{
    <div class="alert alert-info mt-3">
        No available games. Create a new game to start playing!
    </div>
}

<div class="pagination">
    <button class="btn btn-secondary" @onclick="PreviousPage" disabled="@(!CanGoToPreviousPage)">Previous</button>
    <span> Page @CurrentPage of @TotalPages </span>
    <button class="btn btn-secondary" @onclick="NextPage" disabled="@(!CanGoToNextPage)">Next</button>
</div>

<SnackBar @ref="snackbar" />

@code {
    private CreateGameDialog createGameDialog;
    private WalletConnectDialog walletConnectDialog;
    private List<GameLobby> availableGames = new();
    private HubConnection hubConnection;
    private SnackBar snackbar;
    private bool isLoading = false;

    private int CurrentPage { get; set; } = 1;
    private int PageSize { get; set; } = 10;
    private int TotalPages => (int)Math.Ceiling((double)availableGames.Count / PageSize);

    private IEnumerable<GameLobby> PagedGames => availableGames.Skip((CurrentPage - 1) * PageSize).Take(PageSize);

    protected override async Task OnInitializedAsync()
    {
        await LoadAvailableGames();

        hubConnection = new HubConnectionBuilder()
            .WithUrl(Navigation.ToAbsoluteUri("/gamehub"))
            .Build();

        hubConnection.On<GameLobby>("ReceiveNewGame", (newGame) =>
        {
            availableGames.Add(newGame);
            InvokeAsync(StateHasChanged);
        });

        hubConnection.On<GameLobby>("ReceiveDeleteGame", (game) =>
        {
            var index = availableGames.FindIndex(g => g.Id == game.Id);
            if (index >= 0)
            {
                availableGames.RemoveAt(index);
                InvokeAsync(StateHasChanged);
            }
        });

        await hubConnection.StartAsync();
    }

    private async Task LoadAvailableGames()
    {
        try
        {
            isLoading = true;
            StateHasChanged();

            availableGames = await GameService.GetAvailableGames();

            isLoading = false;
            StateHasChanged();
        }
        catch (Exception ex)
        {
            isLoading = false;
            snackbar.Show($"Error loading games: {ex.Message}");
            StateHasChanged();
        }
    }

    private async Task ShowCreateGameDialog()
    {
        if (!WalletService.IsConnected)
        {
            await walletConnectDialog.OpenDialog();
        }
        else
        {
            createGameDialog.Show();
        }
    }

    private async Task HandleGameCreated(int stake)
    {
        try
        {
            isLoading = true;
            StateHasChanged();

            var cells = await GameService.InitPaidGame(WalletService.WalletAddress, stake);
            isLoading = false;

            if (cells != null && cells.Count > 0)
            {
                snackbar.Show("Game created! Your stake has been sent to the blockchain.");
                Navigation.NavigateTo("/");
            }
        }
        catch (Exception ex)
        {
            isLoading = false;
            snackbar.Show(ex.Message);
            StateHasChanged();
        }
    }

    private async Task JoinGame(long gameId)
    {
        try
        {
            if (!WalletService.IsConnected)
            {
                await walletConnectDialog.OpenDialog();
                return;
            }

            isLoading = true;
            StateHasChanged();

            // Check if we can join on the blockchain
            var canSubmit = await WalletService.CanSubmitScoreAsync();
            if (!canSubmit.CanSubmit)
            {
                isLoading = false;
                snackbar.Show($"Cannot join game: {canSubmit.Reason}");
                StateHasChanged();
                return;
            }

            var cells = await GameService.JoinPaidGame(WalletService.WalletAddress, gameId);
            isLoading = false;

            if (cells != null && cells.Count > 0)
            {
                snackbar.Show("Successfully joined the game!");
                Navigation.NavigateTo("/");
            }
        }
        catch (Exception ex)
        {
            isLoading = false;
            snackbar.Show(ex.Message);
            StateHasChanged();
        }
    }

    private void NextPage()
    {
        if (CanGoToNextPage)
        {
            CurrentPage++;
        }
    }

    private void PreviousPage()
    {
        if (CanGoToPreviousPage)
        {
            CurrentPage--;
        }
    }

    private bool CanGoToNextPage => CurrentPage < TotalPages;
    private bool CanGoToPreviousPage => CurrentPage > 1;

    public async ValueTask DisposeAsync()
    {
        if (hubConnection != null)
        {
            await hubConnection.DisposeAsync();
        }
    }
}