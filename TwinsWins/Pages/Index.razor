@page "/"
@using TwinsWins.Components.Dialog
@using TwinsWins.Services;
@inject IJSRuntime JSRuntime
@inject IGameService GameService

<div id="matrix" class="matrix" style="@(IsLandscape ? "grid-template-columns: repeat(6, 1fr); grid-template-rows: repeat(3, 1fr);" : "grid-template-columns: repeat(3, 1fr); grid-template-rows: repeat(6, 1fr);")">
    @foreach (var cell in GameService.Cells)
    {
        <div class="cell @(cell.IsClicked ? "clicked" : "")" @onclick="() => GameService.CellClicked(cell)">
            @if (cell.ImagePath != null && !cell.IsMatched)
            {
                <img src="@($"/images/{cell.ImagePath}")" alt="Image" class="responsive-image" />
            }
        </div>
    }
</div>
@if (!GameService.IsGameActive && !GameService.IsCountdownActive)
{
    <button id="startgame" class="center-button btn btn-primary btn-lg" @onclick="GameService.StartCountdown">Start Game</button>
}
@if (GameService.IsCountdownActive)
{
    <button id="countdown" class="center-button btn btn-primary btn-lg">@GameService.CountdownValue</button>
}

<GameEndDialog Score="gameScore" OnClose="HandleDialogClose" @ref="gameEndDialog" />

@code {
    public bool IsLandscape { get; set; }
    public int WindowWidth { get; set; }
    public int WindowHeight { get; set; }
    private int gameScore;
    private GameEndDialog gameEndDialog;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await JSRuntime.InvokeVoidAsync("initializeResizeHandler", DotNetObjectReference.Create(this));
            AdjustMatrix();
        }
    }

    protected override void OnInitialized()
    {
        GameService.OnGameStateChanged += StateHasChanged;
        GameService.OnGameEnded += ShowGameScoreDialog;
    }

    [JSInvokable]
    public void UpdateWindowDimensions(int width, int height)
    {
        WindowWidth = width;
        WindowHeight = height;
        AdjustMatrix();
    }

    [JSInvokable]
    public void AdjustMatrix()
    {
        IsLandscape = WindowWidth > WindowHeight;
        StateHasChanged();
    }

    private void ShowGameScoreDialog(int score)
    {
        gameScore = score;
        gameEndDialog.Show();
    }

    private void HandleDialogClose()
    {
        // Navigate back to main page and show "Start Game" button
        // GameService.ResetGame();
        StateHasChanged();
    }
}
