@page "/"
@using TwinsWins.Components.Dialog
@using TwinsWins.Services;
@using TwinsWins.Service.Model;
@using TwinsWins.Components.SnackBar
@inject IJSRuntime JSRuntime
@inject IGameService GameService
@inject ITonWalletService WalletService

<div id="matrix" class="matrix" style="@(IsLandscape ? "grid-template-columns: repeat(6, 1fr); grid-template-rows: repeat(3, 1fr);" : "grid-template-columns: repeat(3, 1fr); grid-template-rows: repeat(6, 1fr);")">
    @foreach (var cell in GameService.Cells)
    {
        <div class="cell @(cell.IsClicked ? "clicked" : "")"
             @onmousedown="(e) => HandleMouseDown(e, cell)"
             @onmouseup="(e) => HandleMouseUp(e, cell)"
             @ontouchstart="(e) => HandleTouchStart(e, cell)"
             @ontouchend="(e) => HandleTouchEnd(e, cell)">
            @if (cell.ImagePath != null && !cell.IsMatched)
            {
                <img src="@($"/images/{cell.ImagePath}")" alt="Image" class="responsive-image" draggable="false" />
            }
        </div>
    }
</div>

@if (!GameService.IsGameActive && !GameService.IsCountdownActive)
{
    <button id="startgame" class="center-button btn btn-primary btn-lg" @onclick="StartFreeGame">Lets Play</button>
}
@if (GameService.IsCountdownActive)
{
    <button id="countdown" class="center-button btn btn-primary btn-lg">@GameService.CountdownValue</button>
}

<GameEndDialog Score="gameScore" OnClose="HandleDialogClose" @ref="gameEndDialog" />
<SnackBar @ref="snackbar" />

@code {
    public bool IsLandscape { get; set; }
    public int WindowWidth { get; set; }
    public int WindowHeight { get; set; }
    private int gameScore;
    private GameEndDialog gameEndDialog;
    private SnackBar snackbar;
    private DateTime mouseDownTime;
    private Cell currentCell;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await JSRuntime.InvokeVoidAsync("initializeResizeHandler", DotNetObjectReference.Create(this));
            AdjustMatrix();
        }
    }

    protected override void OnInitialized()
    {
        GameService.OnGameStateChanged += StateHasChanged;
        GameService.OnGameEnded += ShowGameScoreDialog;
    }

    private void HandleMouseDown(MouseEventArgs e, Cell cell)
    {
        if (!GameService.IsGameActive || cell.IsMatched || cell.IsClicked)
            return;

        mouseDownTime = DateTime.Now;
        currentCell = cell;
    }

    private async Task HandleMouseUp(MouseEventArgs e, Cell cell)
    {
        if (!GameService.IsGameActive || cell.IsMatched || cell.IsClicked || cell != currentCell)
            return;

        if ((DateTime.Now - mouseDownTime).TotalMilliseconds < 300)
        {
            await GameService.CellClicked(cell);
        }

        currentCell = null;
    }

    private void HandleTouchStart(TouchEventArgs e, Cell cell)
    {
        if (!GameService.IsGameActive || cell.IsMatched || cell.IsClicked)
            return;

        mouseDownTime = DateTime.Now;
        currentCell = cell;
    }

    private async Task HandleTouchEnd(TouchEventArgs e, Cell cell)
    {
        if (!GameService.IsGameActive || cell.IsMatched || cell.IsClicked || cell != currentCell)
            return;

        if ((DateTime.Now - mouseDownTime).TotalMilliseconds < 300)
        {
            await GameService.CellClicked(cell);
        }

        currentCell = null;
    }

    [JSInvokable]
    public void UpdateWindowDimensions(int width, int height)
    {
        WindowWidth = width;
        WindowHeight = height;
        AdjustMatrix();
    }

    [JSInvokable]
    public void AdjustMatrix()
    {
        IsLandscape = WindowWidth > WindowHeight;
        StateHasChanged();
    }

    private async Task StartFreeGame()
    {
        try
        {
            await GameService.InitFreeGame();
        }
        catch (Exception ex)
        {
            snackbar.Show($"Error starting game: {ex.Message}");
        }
    }

    private void ShowGameScoreDialog(int score)
    {
        gameScore = score;

        if (GameService.IsBlockchainGameActive)
        {
            snackbar.Show("Your score has been submitted to the blockchain!");
        }

        gameEndDialog.Show();
    }

    private void HandleDialogClose()
    {
        StateHasChanged();
    }

    private async Task CheckBlockchainGameStatus()
    {
        try
        {
            var isTimedOut = await GameService.CheckGameTimeout();
            if (isTimedOut)
            {
                snackbar.Show("A pending game has timed out. Funds will be returned to the initiator.");
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error checking game status: {ex.Message}");
        }
    }
}
