@page "/"
@inject IJSRuntime JSRuntime
<!-- Matrix -->
<div id="matrix" class="matrix" style="@(IsLandscape ? "grid-template-columns: repeat(6, 1fr); grid-template-rows: repeat(3, 1fr);" : "grid-template-columns: repeat(3, 1fr); grid-template-rows: repeat(6, 1fr);")">
    @foreach (var cell in Cells)
    {
        <div class="cell" @onclick="() => CellClicked(cell)">
            @cell
        </div>
    }
</div>

@code {
    private List<int> Cells { get; set; } = new List<int>();

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await JSRuntime.InvokeVoidAsync("initializeResizeHandler", DotNetObjectReference.Create(this));
            AdjustMatrix();
        }
    }

    [JSInvokable]
    public void UpdateWindowDimensions(int width, int height)
    {
        WindowWidth = width;
        WindowHeight = height;
        AdjustMatrix();
    }

    [JSInvokable]
    public void AdjustMatrix()
    {
        var isLandscape = WindowWidth > WindowHeight;
        var rows = isLandscape ? 3 : 6;
        var cols = isLandscape ? 6 : 3;

        Cells = Enumerable.Range(1, rows * cols).ToList();
        IsLandscape = isLandscape; // Update the state
        StateHasChanged();
    }

    private void CellClicked(int cell)
    {
        Console.WriteLine($"Cell {cell} clicked");
        // Handle WebSocket send logic here if needed
    }

    public bool IsLandscape { get; set; }
    public int WindowWidth { get; set; }
    public int WindowHeight { get; set; }
}